[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QByteArray",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QDataStream",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QIODevice",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PyQt6.QtCore",
        "description": "PyQt6.QtCore",
        "isExtraImport": true,
        "detail": "PyQt6.QtCore",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractItemView",
        "importPath": "PyQt6.QtWidgets",
        "description": "PyQt6.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt6.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PyQt6.QtGui",
        "description": "PyQt6.QtGui",
        "isExtraImport": true,
        "detail": "PyQt6.QtGui",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "DragDropEntry",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class DragDropEntry(tk.Entry):\n    def __init__(self, master, **kw):\n        tk.Entry.__init__(self, master, **kw)\n        # 드래그 이벤트에 대한 바인딩 추가\n        self.bind(\"<Drop>\", self.drop_event)\n    def drop_event(self, event):\n        # 드롭된 파일 경로 추출\n        file_path = event.data\n        # Entry 위젯에 경로 삽입\n        self.delete(0, tk.END)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "translate_files",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def translate_files():\n    # 번역할 언어 선택\n    target_lang = \"ko\"\n    # 시작 폴더 경로 설정\n    start_folder = folder_path.get()\n    # 번역할 파일 확장자 리스트\n    extensions = [ext.strip() for ext in extension_entry.get().split(\",\")]\n    # 하위 폴더의 모든 파일에서 확장자가 extensions 리스트에 있는 파일을 찾아 번역\n    for root, dirs, files in os.walk(start_folder):\n        for filename in files:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "select_folder",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def select_folder():\n    # 폴더 선택 다이얼로그 열기\n    folder_path.set(filedialog.askdirectory())\n# tkinter 윈도우 생성\nwindow = tk.Tk()\nwindow.geometry(\"500x300\")\n# 윈도우 제목 설정\nwindow.title(\"파일 번역기\")\n# 폴더 선택 라벨\nfolder_label = tk.Label(text=\"폴더 선택\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "translator",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "translator = Translator(service_urls=[\"translate.google.com\"])\nprint(tk.TkVersion)\ndef translate_files():\n    # 번역할 언어 선택\n    target_lang = \"ko\"\n    # 시작 폴더 경로 설정\n    start_folder = folder_path.get()\n    # 번역할 파일 확장자 리스트\n    extensions = [ext.strip() for ext in extension_entry.get().split(\",\")]\n    # 하위 폴더의 모든 파일에서 확장자가 extensions 리스트에 있는 파일을 찾아 번역",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "window = tk.Tk()\nwindow.geometry(\"500x300\")\n# 윈도우 제목 설정\nwindow.title(\"파일 번역기\")\n# 폴더 선택 라벨\nfolder_label = tk.Label(text=\"폴더 선택\")\nfolder_label.pack()\n# 폴더 선택 박스\nfolder_path = tk.StringVar()\nfolder_entry = tk.Entry(textvariable=folder_path)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "folder_label",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "folder_label = tk.Label(text=\"폴더 선택\")\nfolder_label.pack()\n# 폴더 선택 박스\nfolder_path = tk.StringVar()\nfolder_entry = tk.Entry(textvariable=folder_path)\nfolder_entry.pack()\n# 폴더 입력 박스에 DropTarget 기능 추가\nDragDropEntry(folder_entry)\n# 폴더 선택 버튼\nfolder_button = tk.Button(text=\"폴더 선택\", command=select_folder)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "folder_path",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "folder_path = tk.StringVar()\nfolder_entry = tk.Entry(textvariable=folder_path)\nfolder_entry.pack()\n# 폴더 입력 박스에 DropTarget 기능 추가\nDragDropEntry(folder_entry)\n# 폴더 선택 버튼\nfolder_button = tk.Button(text=\"폴더 선택\", command=select_folder)\nfolder_button.pack()\n# 확장자 입력 라벨\nextension_label = tk.Label(text=\"확장자 입력 (여러 개일 경우 ,로 구분)\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "folder_entry",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "folder_entry = tk.Entry(textvariable=folder_path)\nfolder_entry.pack()\n# 폴더 입력 박스에 DropTarget 기능 추가\nDragDropEntry(folder_entry)\n# 폴더 선택 버튼\nfolder_button = tk.Button(text=\"폴더 선택\", command=select_folder)\nfolder_button.pack()\n# 확장자 입력 라벨\nextension_label = tk.Label(text=\"확장자 입력 (여러 개일 경우 ,로 구분)\")\nextension_label.pack()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "folder_button",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "folder_button = tk.Button(text=\"폴더 선택\", command=select_folder)\nfolder_button.pack()\n# 확장자 입력 라벨\nextension_label = tk.Label(text=\"확장자 입력 (여러 개일 경우 ,로 구분)\")\nextension_label.pack()\n# 확장자 입력 박스\nextension_entry = tk.Entry()\nextension_entry.insert(0, \"srt,vtt\")\nextension_entry.pack()\n# 실행 버튼",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "extension_label",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "extension_label = tk.Label(text=\"확장자 입력 (여러 개일 경우 ,로 구분)\")\nextension_label.pack()\n# 확장자 입력 박스\nextension_entry = tk.Entry()\nextension_entry.insert(0, \"srt,vtt\")\nextension_entry.pack()\n# 실행 버튼\nrun_button = tk.Button(text=\"실행\", command=translate_files)\nrun_button.pack()\n# 윈도우 실행",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "extension_entry",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "extension_entry = tk.Entry()\nextension_entry.insert(0, \"srt,vtt\")\nextension_entry.pack()\n# 실행 버튼\nrun_button = tk.Button(text=\"실행\", command=translate_files)\nrun_button.pack()\n# 윈도우 실행\nwindow.mainloop()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "run_button",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "run_button = tk.Button(text=\"실행\", command=translate_files)\nrun_button.pack()\n# 윈도우 실행\nwindow.mainloop()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DropEventFilter",
        "kind": 6,
        "importPath": "eventFilter",
        "description": "eventFilter",
        "peekOfCode": "class DropEventFilter(QObject):\n    def eventFilter(self, obj, event):\n        print(\"📢[eventFilter.py:6]: \", event)\n        if event.type() == QEvent.Type.DragEnter:\n            if event.mimeData().hasUrls():\n                event.acceptProposedAction()\n                return True\n        elif event.type() == QEvent.Type.DragMove:\n            if event.mimeData().hasUrls():\n                event.acceptProposedAction()",
        "detail": "eventFilter",
        "documentation": {}
    },
    {
        "label": "FileListTable",
        "kind": 6,
        "importPath": "FileListTable",
        "description": "FileListTable",
        "peekOfCode": "class FileListTable(QTableWidget):\n    def __init__(self, parent):\n        super().__init__(parent)\n        self.setAcceptDrops(True)\n        self.viewport().setAcceptDrops(True)\n        self.setDragEnabled(True)\n        self.setDragDropMode(QTableWidget.DragDropMode.InternalMove)\n        # Set event filter to handle drop events\n        # self.installEventFilter(DropEventFilter())\n    def dragEnterEvent(self, event):",
        "detail": "FileListTable",
        "documentation": {}
    },
    {
        "label": "TableWidget",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class TableWidget(QTableWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.setRowCount(3)\n        self.setColumnCount(3)\n        self.setDragEnabled(True)\n        self.setAcceptDrops(True)\n        self.setDropIndicatorShown(True)\n        self.setSelectionMode(QAbstractItemView.SelectionMode.SingleSelection)\n        self.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectItems)",
        "detail": "test",
        "documentation": {}
    }
]